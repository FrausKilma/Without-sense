unit UMainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IdContext, Vcl.StdCtrls,
  IdTCPConnection, IdTCPClient, IdBaseComponent, IdComponent, IdCustomTCPServer,
  IdTCPServer, syncobjs, Vcl.Imaging.pngimage, Vcl.ExtCtrls, Vcl.ImgList,
  Vcl.ComCtrls, WinSock, Vcl.Menus, System.Actions, Vcl.ActnList,
  Vcl.Imaging.jpeg, IdHTTP, UArdEmul, dxGDIPlusClasses;

type
  TMainForm = class(TForm)
    IdTCPServer1: TIdTCPServer;
    Image1: TImage;
    TreeView1: TTreeView;
    ImageList1: TImageList;
    IdTCPClient1: TIdTCPClient;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    Panel2: TPanel;
    ButtonStop: TButton;
    Panel3: TPanel;
    Timer1: TTimer;
    ActionList1: TActionList;
    AListenKeys: TAction;
    Label4: TLabel;
    ButSpliter: TButton;
    IdHTTP1: TIdHTTP;
    N4: TMenuItem;
    Programming1: TMenuItem;
    IPhone: TShape;
    IRelay1: TShape;
    IRelay2: TShape;
    IRelay3: TShape;
    IRelay5: TShape;
    IRelay4: TShape;
    IRelay6: TShape;
    IRelay8: TShape;
    StatusBar1: TStatusBar;
    ClientPanel: TIdTCPClient;
    IRelay7: TShape;
    IBut1: TShape;
    IBut2: TShape;
    IBut3: TShape;
    IBut4: TShape;
    IBut5: TShape;
    IBut6: TShape;
    IBut7: TShape;
    IBut8: TShape;
    Ibut9: TShape;
    IGerconSound: TShape;
    IPanel: TShape;
    IGerconDoor: TShape;
    IButWall: TShape;
    IAlarm: TShape;
    ISigIdol: TShape;
    IGerconHand: TShape;
    IIdolButton: TShape;
    ILaser: TShape;
    ISigKey1: TShape;
    ISigKey2: TShape;
    IRelay9: TShape;
    IRelay10: TShape;
    IRelay11: TShape;
    IRelay12: TShape;
    IRelay13: TShape;
    Shape3: TShape;
    IRelay14: TShape;
    procedure FormCreate(Sender: TObject);
    procedure IdTCPServer1Execute(AContext: TIdContext);
    procedure RefreshFromArduino;
    procedure TreeView1DblClick(Sender: TObject);
    procedure ChangeImage(i:Integer);
    function GetColor(i: Integer):TColor;
    procedure TreeView1Change(Sender: TObject; Node: TTreeNode);
    procedure RefreshRelaysSend;
    procedure FormCanResize(Sender: TObject; var NewWidth, NewHeight: Integer;
      var Resize: Boolean);

    procedure Timer1Timer(Sender: TObject);
    procedure ButtonStopClick(Sender: TObject);
    procedure N3Click(Sender: TObject);


    procedure N2Click(Sender: TObject);
    procedure AListenKeysExecute(Sender: TObject);
    procedure N6Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure ButSpliterClick(Sender: TObject);
    procedure ImageState(Img:TShape; Color:TColor; Vid:Integer);
    procedure N4Click(Sender: TObject);
    procedure Programming1Click(Sender: TObject);
    procedure TimerRefresh;
  private
    { Private declarations }
  public
    procedure PostArduino; overload;
    procedure PostArduino(Num:Integer); overload;
    procedure SendPanel(txt:String);
    { Public declarations }
  end;

var
  MainForm: TMainForm;
  Section:TCriticalSection;
  Processed : Integer;
  Relay1, Relay2, Relay3, Relay4, Relay5, Relay6 : Boolean;
  Gercon1, Gercon2, Gercon3, Gercon4, Dat, Light : Boolean;
  Relays:array[0..6] of Integer;
  Sensors: array[0..6] of Integer;
  StepSend: array[0..12] of Integer;
  timeQuest : integer;
  startedQuest : Boolean;
  HostName: String;
  questComplit: boolean;
  stopQuestArduino:Boolean;
  TimeOutQuest : boolean;
  CanResized : boolean;
  procedure ListFileDir(Path: string; FileList: TStrings);
implementation
 uses UHostName, UDebug;
{$R *.dfm}

procedure TMainForm.TimerRefresh;
begin
 Timer1.Enabled := false;
 StartedQuest := false;
 timeQuest := 3600;

 Panel3.Caption := 'Квест закончится через: ';
  Panel3.Caption := Panel3.Caption + inttostr(Trunc(TimeQuest/60)) + ':';
  if (TimeQuest mod 60 > 9) then
   Panel3.Caption := Panel3.Caption + inttostr(TimeQuest mod 60)
  else
   Panel3.Caption := Panel3.Caption + '0' + inttostr(TimeQuest mod 60);

  StatusBar1.Panels[2].Text := '00:00';
  if Trunc(TimeQuest/60) < 5 then panel3.Color := clRed else
  if Trunc(TimeQuest/60) < 10 then panel3.Color := clYellow else
   panel3.Color := clBtnFace;

 Timer1.Enabled := true;

end;


procedure TMainForm.ImageState(Img:TShape; Color:TColor; Vid:Integer);
begin
 if Img.Brush.Color = Color then exit;

 Img.Brush.Color := Color;
 // сенсоры
// if Vid = 1 then Img.Canvas.Ellipse(Img.Canvas.ClipRect);
// if Vid = 2 then Img.Canvas.FillRect(Img.Canvas.ClipRect);
//
// Application.ProcessMessages;
// MainForm.Repaint;
end;

procedure TMainForm.PostArduino;
var txtMessage: string;
I: integer;
begin
//Exit;
 txtMessage := '';

for i := Low(StepSend) to High(StepSend) do
case StepSend[i] of
   1 : txtMessage := txtMessage + 'E';
  -1,0 : txtMessage := txtMessage + '0';
end;
 if not questComplit then
  if stopQuestArduino then txtMessage := txtMessage + 'E'
                      else txtMessage := txtMessage + '0';

  if FrmDebug.Showing then
   FrmDebug.MemSend.Lines.Add(txtMessage);
 try
  IdTCPClient1.Connect;
  IdTCPClient1.Socket.WriteLn(txtMessage);
  IdTCPClient1.Socket.Close;
  IdTCPClient1.Disconnect;
 except
   showmessage('Не настроена сеть с ардуино, обратитесь к автору программы');
 end;
end;

procedure TMainForm.PostArduino(Num:Integer);
var txtMessage: string;
I: integer;
begin
//Exit;
 txtMessage := '';

 for i := 0 to Length(StepSend) - 1 do
  if i = Num-1 then txtMessage := txtMessage + 'E'
               else txtMessage := txtMessage + '0';

if stopQuestArduino then txtMessage := txtMessage + 'E'
                    else txtMessage := txtMessage + '0';

  if FrmDebug.Showing then
   FrmDebug.MemSend.Lines.Add(txtMessage);
 try
  IdTCPClient1.Connect;
  IdTCPClient1.Socket.WriteLn(txtMessage);
  IdTCPClient1.Disconnect;
 except
   showmessage('Не настроена сеть с ардуино, обратитесь к автору программы');
 end;
end;

procedure TMainForm.Programming1Click(Sender: TObject);
begin
FrmEmul.show;
end;

function TMainForm.GetColor(i: Integer):TColor;
begin
 if Relays[i] = 1 then Result := clGreen
 else if Relays[i] = -1 then Result := clRed;

end;

procedure TMainForm.FormCanResize(Sender: TObject; var NewWidth,
  NewHeight: Integer; var Resize: Boolean);
begin
 Resize := CanResized;
end;

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FrmDebug.Free;
  FrmHostName.Free;
  FrmEmul.Free;
  MainForm.Free;
  Application.Terminate;
end;

procedure TMainForm.FormCreate(Sender: TObject);
var
  i: Integer;
  f:textfile;
  str:string;
begin

try
// IdHTTP1.Get('http://www.intuitione.ru/098f6bcd4621d373cade4e832627b4f6.html');
except
on e:Exception do
 begin
  showMessage('Программа не может быть запущена!' + #13 + 'Проверьте соединение с интернетом или обратитесь к автору программы');
  Application.Terminate;
 end;
end;


CanResized := false;
TimeOutQuest := false;
section := TCriticalSection.Create;
StartedQuest := false;
timeQuest:= 3600;
questComplit := false;
for i := Low(Sensors) to High(Sensors) do Sensors[i] := -1;
for i := Low(Relays) to High(Relays) do Relays[i] := -1;
//for i := Low(RelaysSend) to High(RelaysSend) do RelaysSend[i] := 0;


for i := 0 to TreeView1.Items.Count - 1 do
 TreeView1.Items[i].SelectedIndex := TreeView1.Items[i].ImageIndex;

 ImageState(IRelay1, GetColor(0), 2);
 ImageState(IRelay2, GetColor(1), 2);
 ImageState(IRelay3, GetColor(2), 2);
 ImageState(IRelay4, GetColor(3), 2);
 ImageState(IRelay5, GetColor(4), 2);
 ImageState(IRelay6, GetColor(5), 2);
 ImageState(IRelay7, GetColor(6), 2);
 ImageState(IRelay8, GetColor(7), 2);

 ImageState(shpIGercon1,clRed,1);
// ImageState(IGercon2,clRed,1);
 ImageState(IGercon3,clRed,1);
 ImageState(ISig1,clRed,1);
 ImageState(ISig2,clRed,1);
 ImageState(IBut1,clRed,1);
 ImageState(IKey1,clRed,1);
 ImageState(IKey2,clRed,1);
 ImageState(IKey3,clRed,1);
 ImageState(ISig3,clRed,1);
 ImageState(IVent1,clRed,1);

 RefreshFromArduino;

 for I := 0 to ComponentCount - 1 do
  if Components[i].ClassType = TShape then
   TShape(Components[i]).ShowHint := true;

  shpIGercon1.Hint := 'Цифровая подпись';
//  IGercon2.Hint := 'Геркон лабиринт 2';
  IGercon3.Hint := 'HJ78';
  ISig1.Hint := 'Кнопка для входа';
  ISig2.Hint := 'Кнопка включения компьютера';
  ISig3.Hint := 'Сигнал с материнской платы';
  ISig4.Hint := 'Сигнал с цфровой панели на выход';
  IVent1.Hint := 'Вентиляторы';
  IKey1.Hint := 'Ctrl+alt+del';
  IKey2.Hint := 'Цифровой пароль';
  IKey3.Hint := 'Нажатие Enter';
  IDatTemp.Hint := 'Датчик температуры';
  IBut1.Hint := 'Кнопка предохранителя';

 IRelay1.Hint := 'Вход в комнату 1';
 IRelay2.Hint := 'Световая панель';
 IRelay3.Hint := 'Вход в системник';
 IRelay4.Hint := 'Реле на системной плате';
 IRelay5.Hint := 'Реле на HJ78';
 IRelay6.Hint := 'Вход в вентилятор';
 IRelay7.Hint := 'Моторчик на печать';
 IRelay8.Hint := 'Выход из квеста';

if FileExists('Config.ini') then
 begin
   AssignFile(f, 'Config.ini');
   reset(f);
   try
     Readln(f, str);
     IdTCPClient1.host:= str;
     Readln(f, str);
     IdTCPClient1.port:= StrToint(str);
     Readln(f, str);
     IdTCPServer1.DefaultPort:= StrToint(str);
   except

   end;
   CloseFile(f);
 end
 else
 begin
  AssignFile(f,'Config.ini');
  Rewrite(f);

  Writeln(f, IdTCPClient1.Host);
  Writeln(f, IntTostr(IdTCPClient1.Port));
  Writeln(f, IntTostr(IdTCPServer1.DefaultPort));
  CloseFile(f);
 end;



end;

Procedure TMainForm.RefreshFromArduino;
var
 i:Integer;
 img: TShape;
begin
 for i := Low(Sensors) to High(Sensors) do
  begin
   case i of
    0: Img := shpIGercon1;
    1: Img := IGercon3;
    2: Img := ISig1;
    3: Img := ISig2;
    4: Img := ISig3;
    5: Img := ISig4;
    6: Img := IBut1;
    7: Img := IKey1;
    8: Img := IKey2;
    9: Img := IKey3;
    10: Img := IVent1;
    11: Img := IDatTemp;
   end;
    if Sensors[i] = 1 then
     ImageState(img, clGreen, 1)
    else if Sensors[i] = -1 then
     ImageState(img, clRed, 1);
  end;

 for I := Low(Relays) to High(Relays) do
  begin
   case i of
    0: Img := IRelay1;
    1: Img := IRelay2;
    2: Img := IRelay3;
    3: Img := IRelay4;
    4: Img := IRelay5;
    5: Img := IRelay6;
    6: Img := IRelay7;
    7: Img := IRelay8;
   end;
    if Relays[i] = 1 then
     ImageState(img, clGreen, 2)
    else if Relays[i] = -1 then
     ImageState(img, clRed, 2);
   end;


 for i := 0 to TreeView1.Items.Count - 1 do
  TreeView1.Items[i].SelectedIndex := TreeView1.Items[i].ImageIndex;
 if questComplit then ButtonStop.Click;
end;

procedure TMainForm.AListenKeysExecute(Sender: TObject);
begin
 N2.Visible := not N2.Visible;
 Programming1.Visible := not Programming1.Visible;
end;


procedure TMainForm.ButSpliterClick(Sender: TObject);
begin
 if TreeView1.Visible = true then ButSpliter.Caption := '>'
                             else ButSpliter.Caption := '<';
 TreeView1.Visible := not TreeView1.Visible;
end;

procedure TMainForm.ButtonStopClick(Sender: TObject);
var
  i: Integer;
  ComplitRelay: Integer;
begin
 stopQuestArduino := true;

 ImageState(IRelay1, clRed, 2);
 ImageState(IRelay2, clRed, 2);
 ImageState(IRelay3, clRed, 2);
 ImageState(IRelay4, clRed, 2);
 ImageState(IRelay5, clRed, 2);
 ImageState(IRelay6, clRed, 2);
 ImageState(IRelay7, clRed, 2);
 ImageState(IRelay8, clRed, 2);

 ImageState(shpIGercon1,clRed,1);
 ImageState(IGercon3,clRed,1);
 ImageState(ISig1,clRed,1);
 ImageState(ISig2,clRed,1);
 ImageState(ISig3,clRed,1);
 ImageState(ISig4,clRed,1);
 ImageState(IBut1,clRed,1);
 ImageState(IKey1,clRed,1);
 ImageState(IKey2,clRed,1);
 ImageState(IKey3,clRed,1);
 ImageState(IVent1,clRed,1);
 ImageState(IDatTemp,clRed,1);


 for i := 0 to TreeView1.Items.Count - 1  do TreeView1.Items[i].ImageIndex := 3;
 for i := 0 to TreeView1.Items.Count - 1  do TreeView1.Items[i].SelectedIndex := 3;
 StatusBar1.Panels[1].Text := 'квест остановлен';

 ComplitRelay := 0;
 for i := Low(Relays) to High(Relays) do
  if Relays[i] = 1 then inc(ComplitRelay);

 if ComplitRelay >0 then
  Showmessage(' Пройденно '+ FloatToStr((Round(ComplitRelay/(length(Relays))*10000))/100) + '% квеста, время прохождения : '+ StatusBar1.Panels[2].text)
 else ShowMessage('Пройденно 0% квеста, время прохождения : '+ StatusBar1.Panels[2].text);

 for i := Low(Sensors) to High(Sensors) do Sensors[i] := -1;
 for i := Low(Relays) to High(Relays) do Relays[i] := -1;
 for i := Low(StepSend) to High(StepSend) do StepSend[i] := -1;
 PostArduino;
 TimerRefresh;
 stopQuestArduino := false;
 questComplit := false;
end;

procedure TMainForm.ChangeImage(i:Integer);

begin
 StepSend[i] := 1;
 case i of
   // вход во вторую комнату
   0: begin
       IRelay1.Brush.Color := clGreen;
       Relays[0] := 1;
//       SendPanel('Init');
      end;
   // включение компьютера
   1: begin
//       IRelay3.Brush.Color := clGreen;
//       Relays[2] := 1;
       SendPanel('Step1');
      end;
   // ждём перезагрузки
   2: begin
//       IRelay3.Brush.Color := clGreen;
       SendPanel('Step2');

      end;
      // открываем комп
   3: begin
       IRelay3.Brush.Color:= clGreen;
       Relays[2] := 1;
//        SendPanel('Step3');
      end;
   //  ждём пока закончат мат плату
   4: begin

//       IRelay5.Brush.Color := clGreen;
//       Relays[4] := 1;
       SendPanel('Step3');

      end;
    // ждём пока откроют коробку
   5: begin

       IRelay4.Brush.Color := clGreen;
       Relays[3] := 1;
//       SendPanel('Step4');

      end;
   // втыкают джеки
   6: begin

//       IRelay6.Brush.Color := clGreen;
//       Relays[5] := 1;
       SendPanel('Step4');
      end;
      // вход в комнату с ветиляторами
   7: begin
       IRelay5.Brush.Color:= clGreen;
       Relays[4] := 1;
//       SendPanel('Step5');
      end;
   // разобрались с квестом в вентиляторах
   8: begin

//       IRelay8.Brush.Color := clGreen;
//       Relays[7] := 1;
       SendPanel('Step5');
      end;
   // Набрали цифровой пароль
   9: begin

//       IRelay6.Brush.Color := clGreen;
//       Relays[5] := 1;
       SendPanel('Step6');

      end;
   // Нажали Ентер
   10: begin

//       IRelay7.Brush.Color := clGreen;
//       Relays[6] := 1;
       SendPanel('Step7');

      end;
      // Закрыли дверь
   11: begin

       IRelay1.Brush.Color := clGreen;
       Relays[0] := 1;

      end;
      // Набрали пароль
   12: begin

       IRelay6.Brush.Color := clGreen;
       Relays[5] := 1;

      end;
 end;

end;

procedure TMainForm.RefreshRelaysSend;
var
  I: Integer;
begin
// обработка сигнала ардуино для первого степа
if   {  ((Sensors[0] = 1) and (Sensors[1] = 1)
   and  (Relays[0] = 1) and (Relays[1] = 1))
   or} (StepSend[0] = 1)
    then
    begin
      TreeView1.Items[0].ImageIndex := 2;
      TreeView1.Items[0].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден первый этап';
    end
    else
    begin
      TreeView1.Items[0].ImageIndex := 3;
      TreeView1.Items[0].SelectedIndex := 3;
    end;
// обработка сигнала ардуино для второго степа
 if {    ((Sensors[2] = 1)
   and (Relays[2] = 1))
   or }(StepSend[1] = 1)
   then
    begin
      TreeView1.Items[1].ImageIndex := 2;
      TreeView1.Items[1].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден второй этап';
    end
    else
    begin
      TreeView1.Items[1].ImageIndex := 3;
      TreeView1.Items[1].SelectedIndex := 3;
    end;
// обработка сигнала ардуино для третьего степа
if   { ((Sensors[3] = 1) and (Sensors[4] = 1)
   and (Relays[3] = 1))
   or }(StepSend[2] = 1)
   then
    begin
      TreeView1.Items[2].ImageIndex := 2;
      TreeView1.Items[2].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден третий этап';
    end
    else
    begin
      TreeView1.Items[2].ImageIndex := 3;
      TreeView1.Items[2].SelectedIndex := 3;
    end;
// обработка сигнала ардуино для четвёртого степа
if   {  ((Sensors[5] = 1)
   and (Relays[4] = 1))
   or }(StepSend[3] = 1) then
    begin
      TreeView1.Items[3].ImageIndex := 2;
      TreeView1.Items[3].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден четвёртый этап';
    end
    else
    begin
      TreeView1.Items[3].ImageIndex := 3;
      TreeView1.Items[3].SelectedIndex := 3;
    end;
// обработка сигнала ардуино для пятого степа
if  {   ((Sensors[6] = 1) and (Sensors[7] = 1) and (Sensors[8] = 1)
   and (Relays[5] = 1))
   or }(StepSend[4] = 1) then
    begin
      TreeView1.Items[4].ImageIndex := 2;
      TreeView1.Items[4].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден пятый этап';
    end
    else
    begin
      TreeView1.Items[4].ImageIndex := 3;
      TreeView1.Items[4].SelectedIndex := 3;
    end;
// обработка сигнала ардуино для шестого степа
 if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or }(StepSend[5] = 1) then
    begin
      TreeView1.Items[5].ImageIndex := 2;
      TreeView1.Items[5].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден шестой этап';
    end
    else
    begin
      TreeView1.Items[5].ImageIndex := 3;
      TreeView1.Items[5].SelectedIndex := 3;
    end;
 if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[6] = 1) then
    begin
      TreeView1.Items[6].ImageIndex := 2;
      TreeView1.Items[6].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 7 этап';
    end
    else
    begin
      TreeView1.Items[6].ImageIndex := 3;
      TreeView1.Items[6].SelectedIndex := 3;
    end;
 if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[7] = 1) then
    begin
      TreeView1.Items[7].ImageIndex := 2;
      TreeView1.Items[7].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 8 этап';
    end
    else
    begin
      TreeView1.Items[7].ImageIndex := 3;
      TreeView1.Items[7].SelectedIndex := 3;
    end;
 if{     ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[8] = 1) then
    begin
      TreeView1.Items[8].ImageIndex := 2;
      TreeView1.Items[8].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 9 этап';
    end
    else
    begin
      TreeView1.Items[8].ImageIndex := 3;
      TreeView1.Items[8].SelectedIndex := 3;
    end;
 if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[9] = 1) then
    begin
      TreeView1.Items[9].ImageIndex := 2;
      TreeView1.Items[9].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 10 этап';
    end
    else
    begin
      TreeView1.Items[9].ImageIndex := 3;
      TreeView1.Items[9].SelectedIndex := 3;
    end;
  if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[10] = 1) then
    begin
      TreeView1.Items[10].ImageIndex := 2;
      TreeView1.Items[10].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 11 этап';
    end
    else
    begin
      TreeView1.Items[10].ImageIndex := 3;
      TreeView1.Items[10].SelectedIndex := 3;
    end;
   if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[11] = 1) then
    begin
      TreeView1.Items[11].ImageIndex := 2;
      TreeView1.Items[11].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 12 этап';
    end
    else
    begin
      TreeView1.Items[1].ImageIndex := 3;
      TreeView1.Items[1].SelectedIndex := 3;
    end;
   if {    ((Sensors[9] = 1)
   and (Relays[6] = 1))
   or} (StepSend[12] = 1) then
    begin
      TreeView1.Items[11].ImageIndex := 2;
      TreeView1.Items[11].SelectedIndex := 2;
      StatusBar1.Panels[1].Text := 'пройден 13 этап';
    end
    else
    begin
      TreeView1.Items[1].ImageIndex := 3;
      TreeView1.Items[1].SelectedIndex := 3;
    end;



end;

procedure TMainForm.SendPanel(txt: String);
var SL: TStringList;
i:Integer;
begin
 memoPanel.Clear;
 memoPanel.Lines.Text := txt;
  SL := TStringList.Create;

  ListFileDir(ExtractFilePath(Application.ExeName)+ txt,SL);

  if SL.Count >0 then
    begin
     ClientPanel.Connect;
     for I := 0 to SL.Count -1 do
      begin
        ClientPanel.Socket.WriteFile(sl[i]);
        Sleep(200);
      end;
     ClientPanel.Socket.Close;
     ClientPanel.Disconnect;
    end
    else ShowMessage('нет файлов в папке');

   SL.Free;
end;

procedure TMainForm.Timer1Timer(Sender: TObject);
var timeprogress:integer;
begin

if (questComplit) or (TimeOutQuest) or (stopQuestArduino) then
begin
 Timer1.Enabled := false;
// if questComplit then Showmessage('Квест пройден');
// if TimeOutQuest then Showmessage('Время вышло');
// if stopQuestArduino then Showmessage('Остановка квеста ардуиной');
end
else
begin
if (StartedQuest) then
 begin
  TimeQuest := TimeQuest - 1;
  timeprogress := 3600 - TimeQuest;
  Panel3.Caption := 'Квест закончится через: ';
  Panel3.Caption := Panel3.Caption + inttostr(Trunc(TimeQuest/60)) + ':';
  if (TimeQuest mod 60 > 9) then
   Panel3.Caption := Panel3.Caption + inttostr(TimeQuest mod 60)
  else
   Panel3.Caption := Panel3.Caption + '0' + inttostr(TimeQuest mod 60);

  StatusBar1.Panels[2].Text := inttostr(Trunc(timeprogress/60)) + ':';
  if (timeprogress mod 60 > 9) then
   StatusBar1.Panels[2].Text := StatusBar1.Panels[2].Text + inttostr(timeprogress mod 60)
  else
   StatusBar1.Panels[2].Text := StatusBar1.Panels[2].Text + '0' + inttostr(timeprogress mod 60);

  if Trunc(TimeQuest/60) < 5 then panel3.Color := clRed else
  if Trunc(TimeQuest/60) < 10 then panel3.Color := clYellow else
   panel3.Color := clBtnFace;

  if TimeQuest = 0 then TimeOutQuest := true else TimeOutQuest := false;


   if TimeOutQuest then
     begin
      ButtonStop.Font.Color := clBlue;
      ButtonStop.Font.Size := 20;
     end
    else
    begin
     ButtonStop.Font.Color := clWindowText;
     ButtonStop.Font.Size := 8;
    end;
  end;

  Application.ProcessMessages;
end;

end;

procedure TMainForm.TreeView1Change(Sender: TObject; Node: TTreeNode);
var
  i: Integer;
  StrSend : String;
begin
StrSend := '';
 for i := 0 to TreeView1.Items.Count -1  do
   if TreeView1.Items[i].ImageIndex = 2  then
    StepSend[i] := 1
   else
    StepSend[i] := -1;



end;

procedure TMainForm.TreeView1DblClick(Sender: TObject);
var
  I: Integer;
begin
  for I := 0 to TreeView1.SelectionCount -1 do
   begin
    if TreeView1.Selections[i].ImageIndex = 3 then
     begin
      TreeView1.Selections[i].ImageIndex := 2;
      TreeView1.Selections[i].SelectedIndex := 2;
      ChangeImage(TreeView1.Selections[i].Index);
     end;
   end;
  for i := 0 to treeView1.items.count - 1 do
    if treeview1.items.item[i].selected then
     PostArduino(i+1);

  StatusBar1.Panels[1].Text := inttostr(IdTCPServer1.DefaultPort);
end;

procedure TMainForm.IdTCPServer1Execute(AContext: TIdContext);
var
  strText: String;
  i, k: Integer;
  txtSend:String;
  ch: char;
begin
  txtSend := '';
  //Принимаем от клиента строку
//  Showmessage(inttostr(IdTCPServer1.DefaultPort));

   strText := AContext.Connection.Socket.ReadLn;
  if FrmDebug.Showing then
  begin
   FrmDebug.MemRes.Lines.Add(strText);
   FrmDebug.Label3.Caption := AContext.Connection.Socket.Host;
  end;

  for ch in strText do
   begin
     if (ch <> 'T') and (ch <> 'F') then exit;
   end;

  for i := Low(StrText) to High(StrText) do
   begin
   if i = Low(StrText) then
    if StrText[i] = 'T' then
     begin
      startedQuest := true;
      StatusBar1.Panels[1].Text := 'квест начался';
     end;

   if (i>=Low(StrText) + 1) and (i <= Length(Sensors) + 1) then
    begin
          if StrText[i] = 'T' then Sensors[i-2] := 1
     else if StrText[i] = 'F' then Sensors[i-2] := -1
     else if StrText[i] = 'N' then Sensors[i-2] := 0
     else Sensors[i] := 999;
    end
    else if (i > Length(Sensors) + 1) and (i <= Length(Sensors)+Length(Relays) + 1) then
     begin
       k := i - (Length(Sensors) + 2);
            if StrText[i] = 'T' then Relays[k] := 1
       else if StrText[i] = 'F' then Relays[k] := -1
       else if StrText[i] = 'N' then Relays[k] := 0
       else Relays[k] := 999;
     end else
     if i = Length(Sensors)+Length(Relays) + 2 then
      if StrText[i] = 'T' then
     begin
      questComplit := true;
      startedQuest := false;
      StatusBar1.Panels[1].Text := 'квест пройден';
     end;


   end;
   if startedQuest then Label4.Caption := 'Квест запущен, ожидаем его завершения';
   if questComplit then StatusBar1.Panels[1].Text := 'Квест завершён, ожидаем запуск нового квеста';


  RefreshFromArduino;
  RefreshRelaysSend;


  //Закрываем соединение с пользователем
  AContext.Connection.Socket.Close;
  AContext.Connection.Disconnect;
end;


procedure TMainForm.N2Click(Sender: TObject);
begin
 FrmDebug.Show;
end;

procedure TMainForm.N3Click(Sender: TObject);
var f:textfile;
str: string;
begin
   AssignFile(f, 'Config.ini');
   reset(f);

   Readln(f, str);
   FrmHostName.Edit1.Text := str;
   Readln(f, str);
   FrmHostName.SpinEdit1.Value := strToInt(str);
   Readln(f, str);
   FrmHostName.SpinEdit2.Value := strToInt(str);
   CloseFile(f);

 if FrmHostName.ShowModal = mrOk then
  Begin
   IdTCPClient1.Host := FrmHostName.Edit1.Text;
   IdTCPClient1.Port := FrmHostName.SpinEdit1.value;
   IdTCPServer1.DefaultPort := FrmHostName.SpinEdit2.Value;

   AssignFile(f,'Config.ini');
   Rewrite(f);

   Writeln(f, IdTCPClient1.Host);
   Writeln(f, IntTostr(IdTCPClient1.Port));
   Writeln(f, IntTostr(IdTCPServer1.DefaultPort));

   CloseFile(f);

  End;
end;


procedure TMainForm.N4Click(Sender: TObject);
begin
 ShowMessage('Development by Fraus Kilma (fraus_kilma@mail.ru)')
end;

procedure TMainForm.N6Click(Sender: TObject);
begin
 Close;
end;


procedure ListFileDir(Path: string; FileList: TStrings);
 var
   SR: TSearchRec;
 begin
   if FindFirst(Path + '\*.*', faAnyFile, SR) = 0 then
   begin
     repeat
       if (SR.Attr <> faDirectory) then
       begin
         FileList.Add(SR.Name);
       end;
     until FindNext(SR) <> 0;
     FindClose(SR);
   end;
 end;


end.
